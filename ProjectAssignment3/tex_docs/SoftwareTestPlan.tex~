\documentclass[12pt]{article}%

\usepackage{titlesec}
\usepackage{hyperref}

\titleclass{\subsubsubsection}{straight}[\subsection]

\newcounter{subsubsubsection}[subsubsection]
\renewcommand\thesubsubsubsection{\thesubsubsection.\arabic{subsubsubsection}}
\renewcommand\theparagraph{\thesubsubsubsection.\arabic{paragraph}} % optional; useful if paragraphs are to be numbered

\titleformat{\subsubsubsection}
  {\normalfont\normalsize\bfseries}{\thesubsubsubsection}{1em}{}
\titlespacing*{\subsubsubsection}
{0pt}{3.25ex plus 1ex minus .2ex}{1.5ex plus .2ex}

\makeatletter
\renewcommand\paragraph{\@startsection{paragraph}{5}{\z@}%
  {3.25ex \@plus1ex \@minus.2ex}%
  {-1em}%
  {\normalfont\normalsize\bfseries}}
\renewcommand\subparagraph{\@startsection{subparagraph}{6}{\parindent}%
  {3.25ex \@plus1ex \@minus .2ex}%
  {-1em}%
  {\normalfont\normalsize\bfseries}}
\def\toclevel@subsubsubsection{4}
\def\toclevel@paragraph{5}
\def\toclevel@paragraph{6}
\def\l@subsubsubsection{\@dottedtocline{4}{7em}{4em}}
\def\l@paragraph{\@dottedtocline{5}{10em}{5em}}
\def\l@subparagraph{\@dottedtocline{6}{14em}{6em}}
\makeatother

\setcounter{secnumdepth}{4}
\setcounter{tocdepth}{4}

\begin{document}

\begin{titlepage}
	\clearpage\thispagestyle{empty}
	\centering
	\vspace{2cm}

	% Titles
	%{\large  \par}
	%\vspace{4cm}
	{\Huge \textbf{Software Test Plan \\
        for \\
        Employee Record Database}} \\
	\vspace{1cm}
	{\large \textbf{Programming Assignment 2 \\
      January 29, 2020} \par}
	\vspace{4cm}
	{\normalsize Prepared By \\ % \\ specifies a new line
      Paul Abers \\
      pa0034@uah.edu \par}
	\vspace{2cm}

    \vspace{2cm}

	% Information about the University
	{\normalsize Prepared For \\
		Mr. James Williamson \\
		CS 221, Data Structures in C++ \\
        Computer Science Department \\
        University of Alabama in Huntsville \par}

      \vspace{2cm}

	\pagebreak

\end{titlepage}

\tableofcontents

\section{System Overview}
The purpose of this assignment is to provide a simple and easy way
to access an employee record database. The database consists of three
classes, an employee record class, store class and customer list class.
The employee record class must store an employee ID,
employee name, department, annual salary of each employee and a customer list for
supported stores by each employee. The store class stores a pointer to the next store
object (for the customer list) as well as the store id, name, address, city, state and zip code.
The customer list stores a list of stores ordered by store id.

\section{Referenced Documents}
Programming Assignment 1: Statement of Work.
Software Design Document for the Emplyoee Record Database program.

\section{Test Procedures}
The following tests will be performed on the software before its release.
\subsection{Source File: EmployeeRecord.h and EmployeeRecord.cpp}
\subsubsection{Function: EmployeeRecord()}
\subsubsubsection{Purpose and procedure}
This test will determine if the EmployeeRecord constructor is working correctly.
\subsubsubsection{Inputs}
First, a call to the default constructor. Then a call to constructor that takes all inputs.
\subsubsubsection{Expected Output}
The employee record to be initialized to the default state or the input initialized state
depending on the call made to the constructor.
\subsubsubsection{Success Criteria}
The employee record will be checked by calling the constructor and then comparing its state with
calls to all the get methods as well as printRecord(). All should match the expected values that
were set by either the default or input initialized constructor calls.

\subsubsection{Function: ~EmployeeRecord()}
\subsubsubsection{Purpose and procedure}
This test will determine if the destructor for the employee record class is working properly. A test
employee record already set will be supplied.
\subsubsubsection{Inputs}
An employee record class with all values already set.
\subsubsubsection{Expected Output}
The employee record class to properly deallocate memory from all internal variables.
\subsubsubsection{Success Criteria}
Initialize multiple employee record classes and destruct them. Make sure that memory for the program does
not keep increasing after employee records are destroyed.

\subsubsection{Function: getID()}
\subsubsubsection{Purpose and procedure}
This test will determine if the getId() function is working correctly. A test
employee record already set will be supplied.
\subsubsubsection{Inputs}
An employee record class with employee id set to a known integer value.
\subsubsubsection{Expected Output}
The employee record's currently set value.
\subsubsubsection{Success Criteria}
The int returned by getID() matches the int value set for the employee id.

\subsubsection{Function: setID()}
\subsubsubsection{Purpose and procedure}
This test will determine if the setId() function is working correctly. A test
employee record already set will be supplied.
\subsubsubsection{Inputs}
An employee record class with employee id set to a known integer value.
Employee record's id  will then be set to a new value.
\subsubsubsection{Expected Output}
The employee record's new int value to be returned by getID().
\subsubsubsection{Success Criteria}
The int returned by getID() matches the int value set for the employee id.

\subsubsection{Function: getName()}
\subsubsubsection{Purpose and procedure}
This test will determine if the getName() function is working correctly. A test
employee record already set will be supplied.
\subsubsubsection{Inputs}
An employee record class with employee first name and last name set to known character
array values.
\subsubsubsection{Expected Output}
The employee record's currently set values for the first and last name.
\subsubsubsection{Success Criteria}
The character arrays passed into getName to be changed to the current values
for the employee record's first and last names.

\subsubsection{Function: setName()}
\subsubsubsection{Purpose and procedure}
This test will determine if the setName() function is working correctly. A test
employee record already set will be supplied.
\subsubsubsection{Inputs}
An employee record class with employee first name and last name set to known
character array values.
\subsubsubsection{Expected Output}
The employee record's first name and last name to be changed to the first and
last name passed to the function.
\subsubsubsection{Success Criteria}
The employee record's first and last name to start at one known value, be set by the call
to the function and the values copied by getName() to match those passed by setName().

\subsubsection{Function: getDept()}
\subsubsubsection{Purpose and procedure}
This test will determine if the getDept() function is working correctly. A test
employee record already set will be supplied.
\subsubsubsection{Inputs}
An employee record class with employee department set to a known integer value.
\subsubsubsection{Expected Output}
The employee record's currently set department value to be copied into the reference variable
passed into the function.
\subsubsubsection{Success Criteria}
The int value copied into the passed reference variable to match the int value of the employee record's
department value.

\subsubsection{Function: setDept()}
\subsubsubsection{Purpose and procedure}
This test will determine if the setDept() function is working correctly. A test
employee record already set will be supplied.
\subsubsubsection{Inputs}
An employee record class with employee department set to a known integer value.
\subsubsubsection{Expected Output}
The employee record's department value to be set to the new value passed by the call of the method
setDept().
\subsubsubsection{Success Criteria}
The department to start as a known integer, be set to a new integer value, and the subsequent call
to getDept() to match the value of its referenced argument with that of the value passed to setDept().

\subsubsection{Function: getSalary()}
\subsubsubsection{Purpose and procedure}
This test will determine if the getSalary() function is working correctly. A test
employee record already set will be supplied.
\subsubsubsection{Inputs}
An employee record class with employee salary set to a known integer value.
\subsubsubsection{Expected Output}
The employee record's currently set salary value.
\subsubsubsection{Success Criteria}
The double copied into the pointer by getID() matches the double value for the current employee's sacurrent value for the employee's salary.

\subsubsection{Function: setSalary()}
\subsubsubsection{Purpose and procedure}
This test will determine if the setSalary() function is working correctly. A test
employee record already set will be supplied.
\subsubsubsection{Inputs}
An employee record class with employee salary set to a known integer value.
\subsubsubsection{Expected Output}
The employee record's salary to be set to the new salary.
\subsubsubsection{Success Criteria}
The salary to start as a known double, be set to a new double value, and the subsequent call
to getSalary() to match the value of its pointer argument with that of the value passed to setDept().

\subsubsection{Function: printRecord()}
\subsubsubsection{Purpose and procedure}
This test will determine if the printRecord() function is working correctly. A test
employee record already set will be supplied.
\subsubsubsection{Inputs}
An employee record class with all of its member variables set to known values.
\subsubsubsection{Expected Output}
Proper display of employee record to screen.
\subsubsubsection{Success Criteria}
All member variables to be properly printed to screen with their known values.

\subsection{Source File: CustomerList.h and CustomerList.cpp}
\subsubsection{Function: CustomerList()}
\subsubsubsection{Purpose and procedure}
This test will determine if the CustomerList constructor is working correctly.
\subsubsubsection{Inputs}
Instantiate an empty CustomerList object
\subsubsubsection{Expected Output}
The CustomerList to be initialized to an empty list.
\subsubsubsection{Success Criteria}
The CustomerList will be checked by calling the constructor and then calling a print of CustomerList
to check if it is empty and can be called upon.

\subsubsection{Function: \textasciitilde CustomerList()}
\subsubsubsection{Purpose and procedure}
This test will determine if the CustomerList destructor is working correctly.
\subsubsubsection{Inputs}
A CustomerList object
\subsubsubsection{Expected Output}
A destroyed customer list object
\subsubsubsection{Success Criteria}
The CustomerList will be checked by calling the constructor and then destroying it repeatedly and
checking if there is a memory leak.

\subsubsection{Function: addStore()}
\subsubsubsection{Purpose and procedure}
This test will determine if the add store function is working properly.
\subsubsubsection{Inputs}
A known customer list object.
\subsubsubsection{Expected Output}
The store specified with add store added to the customer list object and a retrurn of true from
call to addStore.
\subsubsubsection{Success Criteria}
The customer list printed, store added, then customer list printed again. The store added should be
in the correct position within the list.

\subsubsection{Function: removeStore()}
\subsubsubsection{Purpose and procedure}
This test will determine if the CustomerList remove store function is working correctly.
\subsubsubsection{Inputs}
a known customer list object
\subsubsubsection{Expected Output}
a pointer to a store object with the id specified in call (or null if id not in list)
\subsubsubsection{Success Criteria}
The store returned from call to have the same id as that specified in the argument. The
customer list no longer containing the store with specified id.

\subsubsection{Function: getStore()}
\subsubsubsection{Purpose and procedure}
This test will determine if the CustomerList get store function is working correctly.
\subsubsubsection{Inputs}
A known customer list object
\subsubsubsection{Expected Output}
The store specified by the id passed to the function, or null if id not in customer list.
\subsubsubsection{Success Criteria}
The store returned from call to have the same id as that specified in the argument (or null
if the id was not in the customer list).

\subsubsection{Function: updateStore()}
\subsubsubsection{Purpose and procedure}
This test will determine if the CustomerList update store function is working correctly.
\subsubsubsection{Inputs}
a known customer list object
\subsubsubsection{Expected Output}
A boolean with true if store updated and false if store update failed.
\subsubsubsection{Success Criteria}
The store specified by the id argument to have its values updated to the values passed in the call. A return
of true if id in the customer list and a return of false if id not in the customer list.

\subsubsection{Function: printStoresInfo()}
\subsubsubsection{Purpose and procedure}
This test will determine fi the CustomerList printStoresInfo function is working correctly.
\subsubsubsection{Inputs}
A known customer list object
\subsubsubsection{Expected Output}
A print to screen of all the store info for each store in customer list in the proper order.
\subsubsubsection{Success Criteria}
The print to screen to have the proper information in the proper order for the known
CustomerList object.

\end{document}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: t
%%% End:
